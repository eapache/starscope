#!/usr/bin/env ruby

lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'oj'
require 'optparse'
require 'readline'
require 'starscope'

DEFAULT_DB = '.starscope.db'.freeze
CONFIG_FILE = File.exist?('.starscope.json') ? '.starscope.json' : File.join(Dir.home, '.starscope.json')
GLOBAL_CONFIG = File.exist?(CONFIG_FILE) ? Oj.load_file(CONFIG_FILE, symbol_keys: true) : {}

options = { read: true,
            write: true,
            update: true,
            output: :normal,
            export: [],
            db: DEFAULT_DB }

# Options Parsing
OptionParser.new do |opts|
  opts.banner = <<END
Usage: starscope [options] [PATHS]

The default database is `#{DEFAULT_DB}` if you don't specify one with -f.
The default behaviour is to read and update the database.
If no database exists and no PATHS are specified, Starscope builds a new
database by recursing in the current directory.

Scoped queries must use `::` as the scope separator, even for languages which
have their own scope syntax.

Website: https://github.com/eapache/starscope
User Manual: https://github.com/eapache/starscope/blob/master/doc/USER_GUIDE.md
END

  opts.separator "\nQueries"
  opts.on('-d', '--dump [TABLE]', 'Dumps the DB or specified table to stdout') do |tbl|
    options[:dump] = tbl || true
  end
  opts.on('-l', '--line-mode', 'Starts line-oriented interface') do
    options[:linemode] = true
  end
  opts.on('-q', '--query TABLE,QUERY', 'Looks up QUERY in TABLE') do |query|
    options[:query] = query
  end
  opts.on('-s', '--summary', 'Print a database summary to stdout') do
    options[:summary] = true
  end

  opts.separator "\nDatabase Management"
  opts.on('-e', '--export FORMAT[,PATH]', 'Export in FORMAT to PATH, (see EXPORTING)') do |export|
    options[:export] << export
  end
  opts.on('-f', '--file FILE', "Use FILE instead of `#{DEFAULT_DB}`") do |path|
    options[:db] = path
  end
  opts.on('-x', '--exclude PATTERN', 'Skip files matching PATTERN') do |pattern|
    options[:exclude] ||= []
    options[:exclude] << pattern
  end
  opts.on('--no-read', "Don't read the DB from a file") do
    options[:read] = false
  end
  opts.on('--no-write', "Don't write the DB to a file") do
    options[:write] = false
  end
  opts.on('--no-update', "Don't update the DB") do
    options[:update] = false
  end
  opts.on('--force-update', 'Rebuild the DB by rescanning all files') do
    options[:forceUpdate] = true
  end

  opts.separator "\nMisc"
  opts.on('-v', '--version', 'Print the version number') do
    puts Starscope::VERSION
    exit
  end
  opts.on('--verbose', 'Print extra status messages') do
    if options[:output] == :quiet
      $stderr.puts "Can't be both verbose and quiet"
      exit(1)
    end
    options[:output] = :verbose
  end
  opts.on('--quiet', 'Print fewer messages') do
    if options[:output] == :verbose
      $stderr.puts "Can't be both verbose and quiet"
      exit(1)
    end
    options[:output] = :quiet
  end

  opts.separator <<END
\nEXPORTING
    At the moment two export formats are supported: 'ctags' and 'cscope'. If
    you don't specify a path, the output is written to the file '#{Starscope::Exportable::CTAGS_DEFAULT_PATH}' (for
    ctags) or '#{Starscope::Exportable::CSCOPE_DEFAULT_PATH}' (for cscope) in the current directory.
END
end.parse!

def print_summary(db)
  tables = db.tables
  puts 'No tables' if tables.empty?
  tables.sort.each do |table|
    printf("%-9s %6d records\n", table, db.records(table).length)
  end
end

def format_record(db, rec)
  "#{rec[:name].join ' '} -- #{rec[:file]}:#{rec[:line_no]} (#{db.line_for_record(rec).strip})"
end

def run_query(db, query, separator)
  table = nil
  match = []
  filters = {}
  query.split(separator).each do |tok|
    unless table.nil?
      match << tok
      next
    end

    k, v = tok.split(':', 2)
    if v.nil?
      table = tok
    else
      filters[k.to_sym] = v
    end
  end
  match = match.join(separator)

  if match.empty?
    $stderr.puts 'Invalid input - no query found.'
    return false
  end
  tables = (table == '*' ? db.tables : table.to_sym)
  results = db.query(tables, match, filters)
  if !results || results.empty?
    puts 'No results found.'
  else
    results.sort_by { |x| x[:name].join(' ') }.each do |rec|
      puts format_record(db, rec)
    end
  end
  return true
rescue Starscope::DB::NoTableError
  $stderr.puts "Table '#{table}' doesn't exist."
  return false
end

def dump_table(db, table)
  records = db.records(table).sort do |a, b|
    a[:name][-1].to_s.downcase <=> b[:name][-1].to_s.downcase
  end

  puts "== Table: #{table} =="
  puts 'No records' if records.empty?

  records.each do |record|
    puts format_record(db, record)
  end
end

def dump(db, table)
  case table
  when nil
    db.tables.each { |t| dump_table(db, t) }
  when '_meta'
    puts db.metadata
  when '_files'
    puts db.metadata(:files).keys
  when /^_/
    puts db.metadata(table[1..-1].to_sym)
  else
    dump_table(db, table.to_sym)
  end

  return true
rescue Starscope::DB::NoTableError
  $stderr.puts "Table '#{table}' doesn't exist."
  return false
end

def export(db, param)
  format, path = param.split(',', 2)
  db.export(format.to_sym, path)
rescue Starscope::Exportable::UnknownExportFormatError
  $stderr.puts "Unrecognized export format \"#{format}\""
end

output = Starscope::Output.new(options[:output])
db = Starscope::DB.new(output, GLOBAL_CONFIG)

db_exists = File.exist?(options[:db])

if options[:read] && db_exists
  # we consider it 'new data' if the db was upconverted from an old format
  new_data = !db.load(options[:db])
else
  # no need to run an update if we didn't read any old data
  options[:update] = false
end

if options[:exclude]
  db.add_excludes(options[:exclude])
  new_data = true
end

if options[:forceUpdate]
  db.drop_all
  options[:update] = true
end

if !ARGV.empty?
  # paths specified, add them
  db.add_paths(ARGV)
  new_data = true
elsif !(options[:read] && db_exists)
  # no paths were specified and the database was not read or did not exist;
  # default to building a new DB in the current directory
  db.add_paths(['.'])
  new_data = true
end

updated = db.update if options[:update]
new_data ||= updated

db.save(options[:db]) if options[:write] && (new_data || !db_exists)

options[:export].each { |target| export(db, target) }

run_query(db, options[:query], ',') if options[:query]

print_summary(db) if options[:summary]

if options[:dump]
  if options[:dump].is_a? String
    dump(db, options[:dump])
  else
    dump(db, nil)
  end
end

def linemode_help
  <<END
Input can be a query of the form 'TABLE QUERY' or a special command starting
with a '!'. Recognized special commands are:
  !dump [TABLE]
  !export FORMAT[,PATH]
  !summary
  !update

  !help
  !version
  !quit
END
end

if options[:linemode]
  puts "Run your query as 'TABLE QUERY' or run '!help' for more information."
  begin
    while (input = Readline.readline('> ', true))
      next if input.empty?
      cmd, param = input.split(' ', 2)
      if cmd[0] == '!'
        case cmd[1..-1]
        when 'dump'
          dump(db, param)
        when 'export'
          if param
            export(db, param)
          else
            puts '!export requires an argument'
          end
        when 'summary'
          print_summary(db)
        when 'update'
          changed = db.update
          db.save(options[:db]) if options[:write] && changed
        when 'help'
          puts linemode_help
        when 'version'
          puts Starscope::VERSION
        when 'quit'
          exit
        else
          puts "Unknown command: '#{input}', try '!help'."
        end
      else
        success = run_query(db, input, ' ')
        puts "Try '!help'." unless success
      end
    end
  rescue Interrupt
    exit
  end
end
